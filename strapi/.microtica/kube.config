kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: "{{MIC_NAME}}"
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "{{MIC_NAME}}"
spec:
  storageClassName: "{{MIC_NAME}}"
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: /{{MIC_NAME}}/data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{MIC_NAME}}"
  namespace: "{{MIC_NAMESPACE}}"
spec:
  volumeName: "{{MIC_NAME}}"
  storageClassName: "{{MIC_NAME}}"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    app: "{{MIC_NAME}}"
    microticaService: "{{MIC_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{MIC_NAME}}"
  template:
    metadata:
      labels:
        app: "{{MIC_NAME}}"
    spec:
      imagePullSecrets:
        - name: {{MIC_REGISTRY}}
      containers:
      - name: "{{MIC_NAME}}"
        image: "{{MIC_IMAGE}}"
        env:
        - name: DATABASE_CLIENT
          value: sqlite
        ports:
        - name: http
          containerPort: 1337
        resources:
          requests:
            memory: "{{MIC_AS_MEMORY}}Mi"
            cpu: "{{MIC_AS_CPU}}m"
          limits:
            memory: "{{MIC_AS_MAX_MEMORY}}Mi"
            cpu: "{{MIC_AS_MAX_CPU}}m"
        volumeMounts:
          - name: data
            mountPath: /strapi/api
          - name: data
            mountPath: /strapi/public/uploads
          - name: data
            mountPath: /strapi/.tmp
      volumes:
        - name: "data"
          persistentVolumeClaim:
            claimName: "{{MIC_NAME}}"
---
apiVersion: v1
kind: Service
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    microticaService: "{{MIC_NAME}}"
  annotations:
    app: "{{MIC_NAME}}"
spec:
  ports:
  - port: 443
    targetPort: http
    protocol: TCP
  type: NodePort
  selector:
    app: "{{MIC_NAME}}"
---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta2
metadata:
  namespace: "{{MIC_NAMESPACE}}"
  name: "{{MIC_NAME}}"
  labels:
    microticaService: "{{MIC_NAME}}"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{MIC_NAME}}"
  minReplicas: {{MIC_AS_MIN_REPLICAS}}
  maxReplicas: {{MIC_AS_MAX_REPLICAS}}
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{MIC_AS_MEMORY_UTILIZATION}}
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: {{MIC_AS_CPU_UTILIZATION}}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  name: "{{MIC_NAME}}"
  namespace: "{{MIC_NAMESPACE}}"
spec:
  rules:
    - host: "{{MIC_DOMAIN_NAME}}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: "{{MIC_NAME}}"
                port:
                  number: 443
  tls:
    - hosts:
        - "{{MIC_DOMAIN_NAME}}"
      secretName: cloudflare-tls